In order:

* write a bunch of tests to ensure correct operation! [decent set done]
* replace use of infixNotation() by custom code (cf. fourFn.py)
* test this custom code extensively by using the tests that you wrote (you did, right?)
* then we can go on to the harder part of supporting functions!

* support functions
** bunch of letters followed by open paranthesis
** may be implemented as a special kind of opening paranthesis

* support constants (a bunch of letters instead of numbers)
** e, pi, physical constants, ...

* support variables (x,y,z only perhaps?)
** calculate everything except them
** really useful when introducing the = sign, to solve a Dreisatz etc.

* support units
** this is the meat of the matter
** may be hard to parse
** it is easy, as pint uses them like this:

         12.0 * ureg.meter -> <Quantity(12.0, 'meter')>

   allowing us to treat units like constants! Nice!
** temperature (non-K) may be harder to get right in a nice way
   (semantics are not always clear).

* a Â° postfix operator, which converts to radians

* support unit conversion ("to" keyword like qalculate)

* support plots

* GUI

* other fancy stuff?
